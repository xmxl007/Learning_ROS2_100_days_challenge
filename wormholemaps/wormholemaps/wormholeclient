import sys

from example_interfaces.srv import AddTwoInts
import rclpy
from rclpy.node import Node
from nav2_msgs.srv import LoadMap
from geometry_msgs.msg import PoseWithCovarianceStamped
from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy
map=["/home/amal/my_ws/src/wormholemaps/map/junimap.yaml",
     "/home/amal/my_ws/src/wormholemaps/map/my_map.yaml",

]


class MinimalClientAsync(Node):

    def __init__(self):
        super().__init__('minimal_client_async')
        self.cli = self.create_client(LoadMap,'/map_server/load_map')       
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('service not available, waiting again...')
        self.req = LoadMap.Request()

        self.subscription = self.create_subscription(
            PoseWithCovarianceStamped,  # Message type
            '/amcl_pose',               # Topic name
            self.listener_callback,     # Callback
            qos = QoSProfile(
            reliability=ReliabilityPolicy.RELIABLE,
            durability=DurabilityPolicy.TRANSIENT_LOCAL,
            depth=10
        )
        self.subscription  # prevent unused variable warning


    def send_request(self):
        #self.req.map_url= map[1]
        return self.cli.call_async(self.req)

        def listener_callback(self, msg):
        pose = msg.pose.pose
        x = pose.position.x
        y = pose.position.y
        z = pose.position.z  # usually 0 for ground robots
        self.get_logger().info(f"Robot Pose -> x: {x:.2f}, y: {y:.2f}, z: {z:.2f}")
        
        if x > 3 :
            index=1
            #switch map



        elif x < 3 :
            index=2
            #switch ti initial map

 
def main():
    rclpy.init()

    minimal_client = MinimalClientAsync()
    future = minimal_client.send_request()
    rclpy.spin_until_future_complete(minimal_client, future)
    response = future.result()
    minimal_client.get_logger().info(
        'Result ' )
        
    rclpy.spin(minimal_client)
    minimal_client.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()