<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/nivmini/nivanmodels/derrenyay.urdf.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="two_wheeled_robot">
  <!-- ======================================================================================================= -->
  <!-- Properties / Constants -->
  <!-- ======================================================================================================= -->
  <!-- Mass of the base in kg -->
  <!-- Mass of each wheel in kg -->
  <!-- Touch ground -->
  <!-- Place at front -->
  <!-- ======================================================================================================= -->
  <!-- Materials for Gazebo visualization -->
  <!-- ======================================================================================================= -->
  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="green">
    <color rgba="0 0.8 0 1"/>
  </material>
  <!-- ======================================================================================================= -->
  <!-- Inertia Macros (for calculating moments of inertia) -->
  <!-- ======================================================================================================= -->
  <!-- ======================================================================================================= -->
  <!-- Base Link -->
  <!-- ======================================================================================================= -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.3 0.2 0.1"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.3 0.2 0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="4.0"/>
      <inertia ixx="0.01666666666666667" ixy="0" ixz="0" iyy="0.03333333333333333" iyz="0" izz="0.043333333333333335"/>
    </inertial>
  </link>
  <!-- ======================================================================================================= -->
  <!-- Wheel Macros -->
  <!-- ======================================================================================================= -->
  <link name="left_wheel_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <!-- Rotate cylinder to align with Y-axis for wheel -->
      <geometry>
        <cylinder length="0.02" radius="0.054"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.054"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="0.7"/>
      <inertia ixx="0.0005336333333333333" ixy="0" ixz="0" iyy="0.0005336333333333333" iyz="0" izz="0.0010206"/>
    </inertial>
  </link>
  <joint name="left_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.06 0.11 -0.05"/>
    <parent link="base_link"/>
    <child link="left_wheel_link"/>
    <axis xyz="0 1 0"/>
    <!-- Axis of rotation for wheels (Y-axis) -->
  </joint>
  <!-- Gazebo plugin for wheel joint (for simulation) -->
  <gazebo reference="left_wheel_link">
    <material>Gazebo/Black</material>
    <mu1>1.4</mu1>
    <!-- Friction in primary direction -->
    <mu2>1.4</mu2>
    <!-- Friction in secondary direction -->
  </gazebo>
  <link name="right_wheel_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <!-- Rotate cylinder to align with Y-axis for wheel -->
      <geometry>
        <cylinder length="0.02" radius="0.054"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.054"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="0.7"/>
      <inertia ixx="0.0005336333333333333" ixy="0" ixz="0" iyy="0.0005336333333333333" iyz="0" izz="0.0010206"/>
    </inertial>
  </link>
  <joint name="right_wheel_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.06 -0.11 -0.05"/>
    <parent link="base_link"/>
    <child link="right_wheel_link"/>
    <axis xyz="0 1 0"/>
    <!-- Axis of rotation for wheels (Y-axis) -->
  </joint>
  <!-- Gazebo plugin for wheel joint (for simulation) -->
  <gazebo reference="right_wheel_link">
    <material>Gazebo/Black</material>
    <mu1>1.4</mu1>
    <!-- Friction in primary direction -->
    <mu2>1.4</mu2>
    <!-- Friction in secondary direction -->
  </gazebo>
  <!-- ======================================================================================================= -->
  <!-- Caster Ball Link -->
  <!-- ======================================================================================================= -->
  <link name="caster_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.027"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.027"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  <!-- Fixed Joint to attach caster -->
  <joint name="caster_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.123 0 -0.077"/>
    <parent link="base_link"/>
    <child link="caster_link"/>
  </joint>
  <gazebo reference="caster_link">
    <material>Gazebo/Black</material>
    <mu1>0.6</mu1>
    <!-- Friction in primary direction -->
    <mu2>0.6</mu2>
    <!-- Friction in secondary direction -->
  </gazebo>
  <!-- ======================================================================================================= -->
  <!-- Lidar Link -->
  <!-- ======================================================================================================= -->
  <joint name="laser_joint" type="fixed">
    <parent link="base_link"/>
    <child link="laser_frame"/>
    <origin rpy="0 0 0" xyz="0 0 0.06"/>
  </joint>
  <link name="laser_frame">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.05"/>
      </geometry>
      <material name="red">
        <color rgba="1 0 0 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.05"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.5"/>
      <inertia ixx="0.0003125" ixy="0.0" ixz="0.0" iyy="0.0003125" iyz="0.0" izz="0.000625"/>
    </inertial>
  </link>
  <gazebo reference="laser_frame">
    <material>Gazebo/Red</material>
    <sensor name="laser" type="ray">
      <pose> 0 0 0 0 0 0 </pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <min_angle>-3.14</min_angle>
            <max_angle>3.14</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.3</min>
          <max>5</max>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_ray_sensor.so" name="laser_controller">
        <ros>
          <argument>~/out:=scan</argument>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <topicName>/scan</topicName>
        <frame_name>laser_frame</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  <!-- ======================================================================================================= -->
  <!-- Base_footprint (optional) -->
  <!-- ======================================================================================================= -->
  <link name="base_footprint">
  </link>
  <joint name="base_footprint_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>
  <!-- ======================================================================================================= -->
  <!-- Gazebo Control Plugins -->
  <!-- ======================================================================================================= -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <ros>
        <namespace> </namespace>
      </ros>
      <!-- Plugin update rate in Hz -->
      <update_rate>100</update_rate>
      <!-- Name of left joint, defaults to `left_joint` -->
      <left_joint>left_wheel_joint</left_joint>
      <!-- Name of right joint, defaults to `right_joint` -->
      <right_joint>right_wheel_joint</right_joint>
      <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
      <wheel_separation>0.2</wheel_separation>
      <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
      <wheel_diameter>0.108</wheel_diameter>
      <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
      <wheel_acceleration>1.0</wheel_acceleration>
      <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>7.0</max_wheel_acceleration>
      <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
      <command_topic>cmd_vel</command_topic>
      <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
      <odometry_topic>odom</odometry_topic>
      <!-- Odometry frame, defaults to `odom` -->
      <odometry_frame>odom</odometry_frame>
      <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
      <robot_base_frame>base_footprint</robot_base_frame>
      <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
      <odometry_source>1</odometry_source>
      <!-- Set to true to publish transforms for the wheel links, defaults to false -->
      <publish_wheel_tf>true</publish_wheel_tf>
      <!-- Set to true to publish transforms for the odometry, defaults to true -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
      <publish_wheel_joint_state>true</publish_wheel_joint_state>
      <!-- Set to true to swap right and left wheels, defaults to true -->
      <legacy_mode>true</legacy_mode>
    </plugin>
  </gazebo>
</robot>
